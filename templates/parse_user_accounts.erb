<%=
normalUsers = scope['trivial_resources::users::normal_users']
systemUsers = scope['trivial_resources::users::system_users']
justUsers   = {}

# Some parameters are Optional, so replace undef with empty-Hash
if normalUsers.nil?
  normalUsers = {}
end
if systemUsers.nil?
  systemUsers = {}
end

# Pull out all normal users without any of the custom attributes that this class
# enables.  Also remove all custom-extended group data, which is handled
# elsewhere.  Ensure that a home directory is specified and managed lest Puppet
# create home-less users.
normalUsers.each{|userName, userProps|
  # Identify each default or given home directory
  userHome = ''
  if userProps and userProps['home']
    userHome = userProps['home']
  else
    userHome = "/home/#{userName}"
    if userName == 'root'
      userHome = '/root'
    end
  end

  if userProps
    justUsers[userName] = userProps.clone
    justUsers[userName].delete('ssh_authorized_keys')
    justUsers[userName].delete('ssh_generated_keys')

    if userProps.has_key?('groups')
      justUsers[userName].delete('groups')
      justUsers[userName]['groups'] = []
      
      # May be a simple Array, a complex Hash, or a complex Array-of-Hashes
      if userProps['groups'].is_a?(Hash)
        userProps['groups'].each{|groupName, _|
          justUsers[userName]['groups'] << groupName
        }
      elsif userProps['groups'].kind_of?(Array)
        userProps['groups'].each{|groupElement|
          if groupElement.is_a?(Hash)
            if groupElement.has_key?('name')
              justUsers[userName]['groups'] << groupElement['name'].to_s
            elsif groupElement.has_key?('title')
              justUsers[userName]['groups'] << groupElement['title'].to_s
            else
              justUsers[userName]['groups'] << groupElement.keys.first.to_s
            end
          else
            justUsers[userName]['groups'] << groupElement
          end
        }
      else
        # Assume the value is scalar and is meant to be the group name
        justUsers[userName]['groups'] = [userProps['groups'].to_s]
      end
    end
  else
    justUsers[userName] = {}
  end

  # Puppet will normally define but not create users
  if !justUsers[userName]['ensure']
    justUsers[userName]['ensure'] = 'present'
  end

  # These must not be system users
  justUsers[userName]['system'] = false

  # Puppet must manage the home directory
  if !justUsers[userName]['home']
    justUsers[userName]['home'] = userHome
  end
  justUsers[userName]['managehome'] = true
}

# Add system users.  These accounts must not have passwords, ssh keys, or homes.
systemUsers.each{|userName, userProps|
  if userProps
    justUsers[userName] = userProps.clone
    justUsers[userName].delete('ssh_authorized_keys')
    justUsers[userName].delete('ssh_generated_keys')

    if userProps.has_key?('groups')
      justUsers[userName].delete('groups')
      justUsers[userName]['groups'] = []
      
      # May be a simple Array, a complex Hash, or a complex Array-of-Hashes
      if userProps['groups'].is_a?(Hash)
        userProps['groups'].each{|groupName, _|
          justUsers[userName]['groups'] << groupName
        }
      elsif userProps['groups'].kind_of?(Array)
        userProps['groups'].each{|groupElement|
          if groupElement.is_a?(Hash)
            if groupElement.has_key?('name')
              justUsers[userName]['groups'] << groupElement['name'].to_s
            elsif groupElement.has_key?('title')
              justUsers[userName]['groups'] << groupElement['title'].to_s
            else
              justUsers[userName]['groups'] << groupElement.keys.first.to_s
            end
          else
            justUsers[userName]['groups'] << groupElement
          end
        }
      else
        # Assume the value is scalar and is meant to be the group name
        justUsers[userName]['groups'] = [userProps['groups'].to_s]
      end
    end
  else
    justUsers[userName] = {}
  end

  # Puppet will normally define but not create users
  if !justUsers[userName]['ensure']
    justUsers[userName]['ensure'] = 'present'
  end

  # These must be system users
  justUsers[userName]['system'] = true

  # Puppet must not manage system user homes
  justUsers[userName]['managehome'] = false

  # Strip out passwords
  justUsers[userName].delete('password')
}

# Send the result back to Puppet
justUsers.to_yaml
%>
